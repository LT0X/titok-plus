// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"tiktok-plus/service/rpc/user/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Account                      = user.Account
	AddUserWorkCountRequest      = user.AddUserWorkCountRequest
	CreateUserRequest            = user.CreateUserRequest
	CreateUserResponse           = user.CreateUserResponse
	Empty                        = user.Empty
	GetAccountByNameRequest      = user.GetAccountByNameRequest
	GetAccountByNameResponse     = user.GetAccountByNameResponse
	GetUserByIdRequest           = user.GetUserByIdRequest
	GetUserByIdResponse          = user.GetUserByIdResponse
	IsExitUserRequest            = user.IsExitUserRequest
	IsExitUserResponse           = user.IsExitUserResponse
	SyncUserFavoriteRequest      = user.SyncUserFavoriteRequest
	SyncUserTotalFavoriteRequest = user.SyncUserTotalFavoriteRequest
	UserInfo                     = user.UserInfo

	User interface {
		IsExitUser(ctx context.Context, in *IsExitUserRequest, opts ...grpc.CallOption) (*IsExitUserResponse, error)
		GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error)
		CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
		GetAccountByName(ctx context.Context, in *GetAccountByNameRequest, opts ...grpc.CallOption) (*GetAccountByNameResponse, error)
		AddUserWorkCount(ctx context.Context, in *AddUserWorkCountRequest, opts ...grpc.CallOption) (*Empty, error)
		SyncUserFavorite(ctx context.Context, in *SyncUserFavoriteRequest, opts ...grpc.CallOption) (*Empty, error)
		SyncUserTotalFavorite(ctx context.Context, in *SyncUserTotalFavoriteRequest, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) IsExitUser(ctx context.Context, in *IsExitUserRequest, opts ...grpc.CallOption) (*IsExitUserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.IsExitUser(ctx, in, opts...)
}

func (m *defaultUser) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserById(ctx, in, opts...)
}

func (m *defaultUser) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultUser) GetAccountByName(ctx context.Context, in *GetAccountByNameRequest, opts ...grpc.CallOption) (*GetAccountByNameResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetAccountByName(ctx, in, opts...)
}

func (m *defaultUser) AddUserWorkCount(ctx context.Context, in *AddUserWorkCountRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.AddUserWorkCount(ctx, in, opts...)
}

func (m *defaultUser) SyncUserFavorite(ctx context.Context, in *SyncUserFavoriteRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SyncUserFavorite(ctx, in, opts...)
}

func (m *defaultUser) SyncUserTotalFavorite(ctx context.Context, in *SyncUserTotalFavoriteRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SyncUserTotalFavorite(ctx, in, opts...)
}
