// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"tiktok-plus/service/rpc/user/internal/logic"
	"tiktok-plus/service/rpc/user/internal/svc"
	"tiktok-plus/service/rpc/user/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) IsExitUser(ctx context.Context, in *user.IsExitUserRequest) (*user.IsExitUserResponse, error) {
	l := logic.NewIsExitUserLogic(ctx, s.svcCtx)
	return l.IsExitUser(in)
}

func (s *UserServer) GetUserById(ctx context.Context, in *user.GetUserByIdRequest) (*user.GetUserByIdResponse, error) {
	l := logic.NewGetUserByIdLogic(ctx, s.svcCtx)
	return l.GetUserById(in)
}

func (s *UserServer) CreateUser(ctx context.Context, in *user.CreateUserRequest) (*user.CreateUserResponse, error) {
	l := logic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

func (s *UserServer) GetAccountByName(ctx context.Context, in *user.GetAccountByNameRequest) (*user.GetAccountByNameResponse, error) {
	l := logic.NewGetAccountByNameLogic(ctx, s.svcCtx)
	return l.GetAccountByName(in)
}

func (s *UserServer) AddUserWorkCount(ctx context.Context, in *user.AddUserWorkCountRequest) (*user.Empty, error) {
	l := logic.NewAddUserWorkCountLogic(ctx, s.svcCtx)
	return l.AddUserWorkCount(in)
}

func (s *UserServer) SyncUserFavorite(ctx context.Context, in *user.SyncUserFavoriteRequest) (*user.Empty, error) {
	l := logic.NewSyncUserFavoriteLogic(ctx, s.svcCtx)
	return l.SyncUserFavorite(in)
}

func (s *UserServer) SyncUserTotalFavorite(ctx context.Context, in *user.SyncUserTotalFavoriteRequest) (*user.Empty, error) {
	l := logic.NewSyncUserTotalFavoriteLogic(ctx, s.svcCtx)
	return l.SyncUserTotalFavorite(in)
}
