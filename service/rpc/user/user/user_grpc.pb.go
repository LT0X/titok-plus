// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_IsExitUser_FullMethodName            = "/user.User/IsExitUser"
	User_GetUserById_FullMethodName           = "/user.User/GetUserById"
	User_CreateUser_FullMethodName            = "/user.User/CreateUser"
	User_GetAccountByName_FullMethodName      = "/user.User/GetAccountByName"
	User_AddUserWorkCount_FullMethodName      = "/user.User/AddUserWorkCount"
	User_SyncUserFavorite_FullMethodName      = "/user.User/SyncUserFavorite"
	User_SyncUserTotalFavorite_FullMethodName = "/user.User/SyncUserTotalFavorite"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	IsExitUser(ctx context.Context, in *IsExitUserRequest, opts ...grpc.CallOption) (*IsExitUserResponse, error)
	GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GetAccountByName(ctx context.Context, in *GetAccountByNameRequest, opts ...grpc.CallOption) (*GetAccountByNameResponse, error)
	AddUserWorkCount(ctx context.Context, in *AddUserWorkCountRequest, opts ...grpc.CallOption) (*Empty, error)
	SyncUserFavorite(ctx context.Context, in *SyncUserFavoriteRequest, opts ...grpc.CallOption) (*Empty, error)
	SyncUserTotalFavorite(ctx context.Context, in *SyncUserTotalFavoriteRequest, opts ...grpc.CallOption) (*Empty, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) IsExitUser(ctx context.Context, in *IsExitUserRequest, opts ...grpc.CallOption) (*IsExitUserResponse, error) {
	out := new(IsExitUserResponse)
	err := c.cc.Invoke(ctx, User_IsExitUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error) {
	out := new(GetUserByIdResponse)
	err := c.cc.Invoke(ctx, User_GetUserById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, User_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAccountByName(ctx context.Context, in *GetAccountByNameRequest, opts ...grpc.CallOption) (*GetAccountByNameResponse, error) {
	out := new(GetAccountByNameResponse)
	err := c.cc.Invoke(ctx, User_GetAccountByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUserWorkCount(ctx context.Context, in *AddUserWorkCountRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, User_AddUserWorkCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SyncUserFavorite(ctx context.Context, in *SyncUserFavoriteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, User_SyncUserFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SyncUserTotalFavorite(ctx context.Context, in *SyncUserTotalFavoriteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, User_SyncUserTotalFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	IsExitUser(context.Context, *IsExitUserRequest) (*IsExitUserResponse, error)
	GetUserById(context.Context, *GetUserByIdRequest) (*GetUserByIdResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GetAccountByName(context.Context, *GetAccountByNameRequest) (*GetAccountByNameResponse, error)
	AddUserWorkCount(context.Context, *AddUserWorkCountRequest) (*Empty, error)
	SyncUserFavorite(context.Context, *SyncUserFavoriteRequest) (*Empty, error)
	SyncUserTotalFavorite(context.Context, *SyncUserTotalFavoriteRequest) (*Empty, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) IsExitUser(context.Context, *IsExitUserRequest) (*IsExitUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExitUser not implemented")
}
func (UnimplementedUserServer) GetUserById(context.Context, *GetUserByIdRequest) (*GetUserByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServer) GetAccountByName(context.Context, *GetAccountByNameRequest) (*GetAccountByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByName not implemented")
}
func (UnimplementedUserServer) AddUserWorkCount(context.Context, *AddUserWorkCountRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserWorkCount not implemented")
}
func (UnimplementedUserServer) SyncUserFavorite(context.Context, *SyncUserFavoriteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncUserFavorite not implemented")
}
func (UnimplementedUserServer) SyncUserTotalFavorite(context.Context, *SyncUserTotalFavoriteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncUserTotalFavorite not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_IsExitUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsExitUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).IsExitUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_IsExitUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).IsExitUser(ctx, req.(*IsExitUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserById(ctx, req.(*GetUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAccountByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAccountByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetAccountByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAccountByName(ctx, req.(*GetAccountByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUserWorkCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserWorkCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUserWorkCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddUserWorkCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUserWorkCount(ctx, req.(*AddUserWorkCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SyncUserFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncUserFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SyncUserFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SyncUserFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SyncUserFavorite(ctx, req.(*SyncUserFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SyncUserTotalFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncUserTotalFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SyncUserTotalFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SyncUserTotalFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SyncUserTotalFavorite(ctx, req.(*SyncUserTotalFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsExitUser",
			Handler:    _User_IsExitUser_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _User_GetUserById_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
		{
			MethodName: "GetAccountByName",
			Handler:    _User_GetAccountByName_Handler,
		},
		{
			MethodName: "AddUserWorkCount",
			Handler:    _User_AddUserWorkCount_Handler,
		},
		{
			MethodName: "SyncUserFavorite",
			Handler:    _User_SyncUserFavorite_Handler,
		},
		{
			MethodName: "SyncUserTotalFavorite",
			Handler:    _User_SyncUserTotalFavorite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
