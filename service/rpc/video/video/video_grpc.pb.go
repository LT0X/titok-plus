// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: video.proto

//goctl rpc protoc video.proto --go_out=. --go-grpc_out=. --zrpc_out=. --style go_zero

package video

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Video_PublishVideo_FullMethodName             = "/video.Video/PublishVideo"
	Video_GetPublishList_FullMethodName           = "/video.Video/GetPublishList"
	Video_GetVideoFeed_FullMethodName             = "/video.Video/GetVideoFeed"
	Video_FavoriteAction_FullMethodName           = "/video.Video/FavoriteAction"
	Video_CommentAction_FullMethodName            = "/video.Video/CommentAction"
	Video_GetCommentList_FullMethodName           = "/video.Video/GetCommentList"
	Video_UpdateVideoLikeCount_FullMethodName     = "/video.Video/UpdateVideoLikeCount"
	Video_GetUserInfoIdsByVideoIds_FullMethodName = "/video.Video/GetUserInfoIdsByVideoIds"
)

// VideoClient is the client API for Video service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoClient interface {
	PublishVideo(ctx context.Context, in *CreateVideoRequest, opts ...grpc.CallOption) (*Empty, error)
	GetPublishList(ctx context.Context, in *GetPublishListRequest, opts ...grpc.CallOption) (*GetPublishListResponse, error)
	GetVideoFeed(ctx context.Context, in *GetVideoFeedRequest, opts ...grpc.CallOption) (*GetVideoFeedResponse, error)
	FavoriteAction(ctx context.Context, in *FavoriteActionRequest, opts ...grpc.CallOption) (*Empty, error)
	CommentAction(ctx context.Context, in *CommentActionRequest, opts ...grpc.CallOption) (*Empty, error)
	GetCommentList(ctx context.Context, in *GetCommentListRequest, opts ...grpc.CallOption) (*GetCommentListResponse, error)
	UpdateVideoLikeCount(ctx context.Context, in *UpdateVideoLikeCountRequest, opts ...grpc.CallOption) (*Empty, error)
	GetUserInfoIdsByVideoIds(ctx context.Context, in *GetUserInfoIdsByVideoIdsRequest, opts ...grpc.CallOption) (*GetUserInfoIdsByVideoIdsResponse, error)
}

type videoClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoClient(cc grpc.ClientConnInterface) VideoClient {
	return &videoClient{cc}
}

func (c *videoClient) PublishVideo(ctx context.Context, in *CreateVideoRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Video_PublishVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetPublishList(ctx context.Context, in *GetPublishListRequest, opts ...grpc.CallOption) (*GetPublishListResponse, error) {
	out := new(GetPublishListResponse)
	err := c.cc.Invoke(ctx, Video_GetPublishList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetVideoFeed(ctx context.Context, in *GetVideoFeedRequest, opts ...grpc.CallOption) (*GetVideoFeedResponse, error) {
	out := new(GetVideoFeedResponse)
	err := c.cc.Invoke(ctx, Video_GetVideoFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) FavoriteAction(ctx context.Context, in *FavoriteActionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Video_FavoriteAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) CommentAction(ctx context.Context, in *CommentActionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Video_CommentAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetCommentList(ctx context.Context, in *GetCommentListRequest, opts ...grpc.CallOption) (*GetCommentListResponse, error) {
	out := new(GetCommentListResponse)
	err := c.cc.Invoke(ctx, Video_GetCommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) UpdateVideoLikeCount(ctx context.Context, in *UpdateVideoLikeCountRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Video_UpdateVideoLikeCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetUserInfoIdsByVideoIds(ctx context.Context, in *GetUserInfoIdsByVideoIdsRequest, opts ...grpc.CallOption) (*GetUserInfoIdsByVideoIdsResponse, error) {
	out := new(GetUserInfoIdsByVideoIdsResponse)
	err := c.cc.Invoke(ctx, Video_GetUserInfoIdsByVideoIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServer is the server API for Video service.
// All implementations must embed UnimplementedVideoServer
// for forward compatibility
type VideoServer interface {
	PublishVideo(context.Context, *CreateVideoRequest) (*Empty, error)
	GetPublishList(context.Context, *GetPublishListRequest) (*GetPublishListResponse, error)
	GetVideoFeed(context.Context, *GetVideoFeedRequest) (*GetVideoFeedResponse, error)
	FavoriteAction(context.Context, *FavoriteActionRequest) (*Empty, error)
	CommentAction(context.Context, *CommentActionRequest) (*Empty, error)
	GetCommentList(context.Context, *GetCommentListRequest) (*GetCommentListResponse, error)
	UpdateVideoLikeCount(context.Context, *UpdateVideoLikeCountRequest) (*Empty, error)
	GetUserInfoIdsByVideoIds(context.Context, *GetUserInfoIdsByVideoIdsRequest) (*GetUserInfoIdsByVideoIdsResponse, error)
	mustEmbedUnimplementedVideoServer()
}

// UnimplementedVideoServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServer struct {
}

func (UnimplementedVideoServer) PublishVideo(context.Context, *CreateVideoRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishVideo not implemented")
}
func (UnimplementedVideoServer) GetPublishList(context.Context, *GetPublishListRequest) (*GetPublishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishList not implemented")
}
func (UnimplementedVideoServer) GetVideoFeed(context.Context, *GetVideoFeedRequest) (*GetVideoFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoFeed not implemented")
}
func (UnimplementedVideoServer) FavoriteAction(context.Context, *FavoriteActionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteAction not implemented")
}
func (UnimplementedVideoServer) CommentAction(context.Context, *CommentActionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentAction not implemented")
}
func (UnimplementedVideoServer) GetCommentList(context.Context, *GetCommentListRequest) (*GetCommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentList not implemented")
}
func (UnimplementedVideoServer) UpdateVideoLikeCount(context.Context, *UpdateVideoLikeCountRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideoLikeCount not implemented")
}
func (UnimplementedVideoServer) GetUserInfoIdsByVideoIds(context.Context, *GetUserInfoIdsByVideoIdsRequest) (*GetUserInfoIdsByVideoIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoIdsByVideoIds not implemented")
}
func (UnimplementedVideoServer) mustEmbedUnimplementedVideoServer() {}

// UnsafeVideoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServer will
// result in compilation errors.
type UnsafeVideoServer interface {
	mustEmbedUnimplementedVideoServer()
}

func RegisterVideoServer(s grpc.ServiceRegistrar, srv VideoServer) {
	s.RegisterService(&Video_ServiceDesc, srv)
}

func _Video_PublishVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).PublishVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_PublishVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).PublishVideo(ctx, req.(*CreateVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetPublishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetPublishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetPublishList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetPublishList(ctx, req.(*GetPublishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetVideoFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetVideoFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetVideoFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetVideoFeed(ctx, req.(*GetVideoFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_FavoriteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).FavoriteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_FavoriteAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).FavoriteAction(ctx, req.(*FavoriteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_CommentAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).CommentAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_CommentAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).CommentAction(ctx, req.(*CommentActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetCommentList(ctx, req.(*GetCommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_UpdateVideoLikeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoLikeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).UpdateVideoLikeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_UpdateVideoLikeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).UpdateVideoLikeCount(ctx, req.(*UpdateVideoLikeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetUserInfoIdsByVideoIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoIdsByVideoIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetUserInfoIdsByVideoIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetUserInfoIdsByVideoIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetUserInfoIdsByVideoIds(ctx, req.(*GetUserInfoIdsByVideoIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Video_ServiceDesc is the grpc.ServiceDesc for Video service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Video_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.Video",
	HandlerType: (*VideoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishVideo",
			Handler:    _Video_PublishVideo_Handler,
		},
		{
			MethodName: "GetPublishList",
			Handler:    _Video_GetPublishList_Handler,
		},
		{
			MethodName: "GetVideoFeed",
			Handler:    _Video_GetVideoFeed_Handler,
		},
		{
			MethodName: "FavoriteAction",
			Handler:    _Video_FavoriteAction_Handler,
		},
		{
			MethodName: "CommentAction",
			Handler:    _Video_CommentAction_Handler,
		},
		{
			MethodName: "GetCommentList",
			Handler:    _Video_GetCommentList_Handler,
		},
		{
			MethodName: "UpdateVideoLikeCount",
			Handler:    _Video_UpdateVideoLikeCount_Handler,
		},
		{
			MethodName: "GetUserInfoIdsByVideoIds",
			Handler:    _Video_GetUserInfoIdsByVideoIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}
